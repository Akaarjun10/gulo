/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataSet implements org.apache.thrift.TBase<DataSet, DataSet._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataSet");

  private static final org.apache.thrift.protocol.TField ABSTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSummary", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATASET_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetUUID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INTELLECTUAL_RIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("intellectualRights", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PUB_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pubDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataSetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataSetTupleSchemeFactory());
  }

  public String abstractSummary; // required
  public String datasetUUID; // required
  public String intellectualRights; // required
  public String language; // required
  public String organizationName; // required
  public String pubDate; // required
  public String title; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ABSTRACT_SUMMARY((short)1, "abstractSummary"),
    DATASET_UUID((short)2, "datasetUUID"),
    INTELLECTUAL_RIGHTS((short)3, "intellectualRights"),
    LANGUAGE((short)4, "language"),
    ORGANIZATION_NAME((short)5, "organizationName"),
    PUB_DATE((short)6, "pubDate"),
    TITLE((short)7, "title");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ABSTRACT_SUMMARY
          return ABSTRACT_SUMMARY;
        case 2: // DATASET_UUID
          return DATASET_UUID;
        case 3: // INTELLECTUAL_RIGHTS
          return INTELLECTUAL_RIGHTS;
        case 4: // LANGUAGE
          return LANGUAGE;
        case 5: // ORGANIZATION_NAME
          return ORGANIZATION_NAME;
        case 6: // PUB_DATE
          return PUB_DATE;
        case 7: // TITLE
          return TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ABSTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("abstractSummary", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATASET_UUID, new org.apache.thrift.meta_data.FieldMetaData("datasetUUID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTELLECTUAL_RIGHTS, new org.apache.thrift.meta_data.FieldMetaData("intellectualRights", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("organizationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUB_DATE, new org.apache.thrift.meta_data.FieldMetaData("pubDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataSet.class, metaDataMap);
  }

  public DataSet() {
  }

  public DataSet(
    String abstractSummary,
    String datasetUUID,
    String intellectualRights,
    String language,
    String organizationName,
    String pubDate,
    String title)
  {
    this();
    this.abstractSummary = abstractSummary;
    this.datasetUUID = datasetUUID;
    this.intellectualRights = intellectualRights;
    this.language = language;
    this.organizationName = organizationName;
    this.pubDate = pubDate;
    this.title = title;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataSet(DataSet other) {
    if (other.isSetAbstractSummary()) {
      this.abstractSummary = other.abstractSummary;
    }
    if (other.isSetDatasetUUID()) {
      this.datasetUUID = other.datasetUUID;
    }
    if (other.isSetIntellectualRights()) {
      this.intellectualRights = other.intellectualRights;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetOrganizationName()) {
      this.organizationName = other.organizationName;
    }
    if (other.isSetPubDate()) {
      this.pubDate = other.pubDate;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
  }

  public DataSet deepCopy() {
    return new DataSet(this);
  }

  @Override
  public void clear() {
    this.abstractSummary = null;
    this.datasetUUID = null;
    this.intellectualRights = null;
    this.language = null;
    this.organizationName = null;
    this.pubDate = null;
    this.title = null;
  }

  public String getAbstractSummary() {
    return this.abstractSummary;
  }

  public DataSet setAbstractSummary(String abstractSummary) {
    this.abstractSummary = abstractSummary;
    return this;
  }

  public void unsetAbstractSummary() {
    this.abstractSummary = null;
  }

  /** Returns true if field abstractSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetAbstractSummary() {
    return this.abstractSummary != null;
  }

  public void setAbstractSummaryIsSet(boolean value) {
    if (!value) {
      this.abstractSummary = null;
    }
  }

  public String getDatasetUUID() {
    return this.datasetUUID;
  }

  public DataSet setDatasetUUID(String datasetUUID) {
    this.datasetUUID = datasetUUID;
    return this;
  }

  public void unsetDatasetUUID() {
    this.datasetUUID = null;
  }

  /** Returns true if field datasetUUID is set (has been assigned a value) and false otherwise */
  public boolean isSetDatasetUUID() {
    return this.datasetUUID != null;
  }

  public void setDatasetUUIDIsSet(boolean value) {
    if (!value) {
      this.datasetUUID = null;
    }
  }

  public String getIntellectualRights() {
    return this.intellectualRights;
  }

  public DataSet setIntellectualRights(String intellectualRights) {
    this.intellectualRights = intellectualRights;
    return this;
  }

  public void unsetIntellectualRights() {
    this.intellectualRights = null;
  }

  /** Returns true if field intellectualRights is set (has been assigned a value) and false otherwise */
  public boolean isSetIntellectualRights() {
    return this.intellectualRights != null;
  }

  public void setIntellectualRightsIsSet(boolean value) {
    if (!value) {
      this.intellectualRights = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public DataSet setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getOrganizationName() {
    return this.organizationName;
  }

  public DataSet setOrganizationName(String organizationName) {
    this.organizationName = organizationName;
    return this;
  }

  public void unsetOrganizationName() {
    this.organizationName = null;
  }

  /** Returns true if field organizationName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganizationName() {
    return this.organizationName != null;
  }

  public void setOrganizationNameIsSet(boolean value) {
    if (!value) {
      this.organizationName = null;
    }
  }

  public String getPubDate() {
    return this.pubDate;
  }

  public DataSet setPubDate(String pubDate) {
    this.pubDate = pubDate;
    return this;
  }

  public void unsetPubDate() {
    this.pubDate = null;
  }

  /** Returns true if field pubDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPubDate() {
    return this.pubDate != null;
  }

  public void setPubDateIsSet(boolean value) {
    if (!value) {
      this.pubDate = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public DataSet setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ABSTRACT_SUMMARY:
      if (value == null) {
        unsetAbstractSummary();
      } else {
        setAbstractSummary((String)value);
      }
      break;

    case DATASET_UUID:
      if (value == null) {
        unsetDatasetUUID();
      } else {
        setDatasetUUID((String)value);
      }
      break;

    case INTELLECTUAL_RIGHTS:
      if (value == null) {
        unsetIntellectualRights();
      } else {
        setIntellectualRights((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case ORGANIZATION_NAME:
      if (value == null) {
        unsetOrganizationName();
      } else {
        setOrganizationName((String)value);
      }
      break;

    case PUB_DATE:
      if (value == null) {
        unsetPubDate();
      } else {
        setPubDate((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ABSTRACT_SUMMARY:
      return getAbstractSummary();

    case DATASET_UUID:
      return getDatasetUUID();

    case INTELLECTUAL_RIGHTS:
      return getIntellectualRights();

    case LANGUAGE:
      return getLanguage();

    case ORGANIZATION_NAME:
      return getOrganizationName();

    case PUB_DATE:
      return getPubDate();

    case TITLE:
      return getTitle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ABSTRACT_SUMMARY:
      return isSetAbstractSummary();
    case DATASET_UUID:
      return isSetDatasetUUID();
    case INTELLECTUAL_RIGHTS:
      return isSetIntellectualRights();
    case LANGUAGE:
      return isSetLanguage();
    case ORGANIZATION_NAME:
      return isSetOrganizationName();
    case PUB_DATE:
      return isSetPubDate();
    case TITLE:
      return isSetTitle();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataSet)
      return this.equals((DataSet)that);
    return false;
  }

  public boolean equals(DataSet that) {
    if (that == null)
      return false;

    boolean this_present_abstractSummary = true && this.isSetAbstractSummary();
    boolean that_present_abstractSummary = true && that.isSetAbstractSummary();
    if (this_present_abstractSummary || that_present_abstractSummary) {
      if (!(this_present_abstractSummary && that_present_abstractSummary))
        return false;
      if (!this.abstractSummary.equals(that.abstractSummary))
        return false;
    }

    boolean this_present_datasetUUID = true && this.isSetDatasetUUID();
    boolean that_present_datasetUUID = true && that.isSetDatasetUUID();
    if (this_present_datasetUUID || that_present_datasetUUID) {
      if (!(this_present_datasetUUID && that_present_datasetUUID))
        return false;
      if (!this.datasetUUID.equals(that.datasetUUID))
        return false;
    }

    boolean this_present_intellectualRights = true && this.isSetIntellectualRights();
    boolean that_present_intellectualRights = true && that.isSetIntellectualRights();
    if (this_present_intellectualRights || that_present_intellectualRights) {
      if (!(this_present_intellectualRights && that_present_intellectualRights))
        return false;
      if (!this.intellectualRights.equals(that.intellectualRights))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_organizationName = true && this.isSetOrganizationName();
    boolean that_present_organizationName = true && that.isSetOrganizationName();
    if (this_present_organizationName || that_present_organizationName) {
      if (!(this_present_organizationName && that_present_organizationName))
        return false;
      if (!this.organizationName.equals(that.organizationName))
        return false;
    }

    boolean this_present_pubDate = true && this.isSetPubDate();
    boolean that_present_pubDate = true && that.isSetPubDate();
    if (this_present_pubDate || that_present_pubDate) {
      if (!(this_present_pubDate && that_present_pubDate))
        return false;
      if (!this.pubDate.equals(that.pubDate))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_abstractSummary = true && (isSetAbstractSummary());
    builder.append(present_abstractSummary);
    if (present_abstractSummary)
      builder.append(abstractSummary);

    boolean present_datasetUUID = true && (isSetDatasetUUID());
    builder.append(present_datasetUUID);
    if (present_datasetUUID)
      builder.append(datasetUUID);

    boolean present_intellectualRights = true && (isSetIntellectualRights());
    builder.append(present_intellectualRights);
    if (present_intellectualRights)
      builder.append(intellectualRights);

    boolean present_language = true && (isSetLanguage());
    builder.append(present_language);
    if (present_language)
      builder.append(language);

    boolean present_organizationName = true && (isSetOrganizationName());
    builder.append(present_organizationName);
    if (present_organizationName)
      builder.append(organizationName);

    boolean present_pubDate = true && (isSetPubDate());
    builder.append(present_pubDate);
    if (present_pubDate)
      builder.append(pubDate);

    boolean present_title = true && (isSetTitle());
    builder.append(present_title);
    if (present_title)
      builder.append(title);

    return builder.toHashCode();
  }

  public int compareTo(DataSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DataSet typedOther = (DataSet)other;

    lastComparison = Boolean.valueOf(isSetAbstractSummary()).compareTo(typedOther.isSetAbstractSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbstractSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSummary, typedOther.abstractSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatasetUUID()).compareTo(typedOther.isSetDatasetUUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatasetUUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetUUID, typedOther.datasetUUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntellectualRights()).compareTo(typedOther.isSetIntellectualRights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntellectualRights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intellectualRights, typedOther.intellectualRights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganizationName()).compareTo(typedOther.isSetOrganizationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganizationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizationName, typedOther.organizationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubDate()).compareTo(typedOther.isSetPubDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubDate, typedOther.pubDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataSet(");
    boolean first = true;

    sb.append("abstractSummary:");
    if (this.abstractSummary == null) {
      sb.append("null");
    } else {
      sb.append(this.abstractSummary);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datasetUUID:");
    if (this.datasetUUID == null) {
      sb.append("null");
    } else {
      sb.append(this.datasetUUID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intellectualRights:");
    if (this.intellectualRights == null) {
      sb.append("null");
    } else {
      sb.append(this.intellectualRights);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organizationName:");
    if (this.organizationName == null) {
      sb.append("null");
    } else {
      sb.append(this.organizationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubDate:");
    if (this.pubDate == null) {
      sb.append("null");
    } else {
      sb.append(this.pubDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (abstractSummary == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'abstractSummary' was not present! Struct: " + toString());
    }
    if (datasetUUID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'datasetUUID' was not present! Struct: " + toString());
    }
    if (intellectualRights == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'intellectualRights' was not present! Struct: " + toString());
    }
    if (language == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'language' was not present! Struct: " + toString());
    }
    if (organizationName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'organizationName' was not present! Struct: " + toString());
    }
    if (pubDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pubDate' was not present! Struct: " + toString());
    }
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataSetStandardSchemeFactory implements SchemeFactory {
    public DataSetStandardScheme getScheme() {
      return new DataSetStandardScheme();
    }
  }

  private static class DataSetStandardScheme extends StandardScheme<DataSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ABSTRACT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.abstractSummary = iprot.readString();
              struct.setAbstractSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATASET_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datasetUUID = iprot.readString();
              struct.setDatasetUUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTELLECTUAL_RIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intellectualRights = iprot.readString();
              struct.setIntellectualRightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORGANIZATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organizationName = iprot.readString();
              struct.setOrganizationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUB_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pubDate = iprot.readString();
              struct.setPubDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.abstractSummary != null) {
        oprot.writeFieldBegin(ABSTRACT_SUMMARY_FIELD_DESC);
        oprot.writeString(struct.abstractSummary);
        oprot.writeFieldEnd();
      }
      if (struct.datasetUUID != null) {
        oprot.writeFieldBegin(DATASET_UUID_FIELD_DESC);
        oprot.writeString(struct.datasetUUID);
        oprot.writeFieldEnd();
      }
      if (struct.intellectualRights != null) {
        oprot.writeFieldBegin(INTELLECTUAL_RIGHTS_FIELD_DESC);
        oprot.writeString(struct.intellectualRights);
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.organizationName != null) {
        oprot.writeFieldBegin(ORGANIZATION_NAME_FIELD_DESC);
        oprot.writeString(struct.organizationName);
        oprot.writeFieldEnd();
      }
      if (struct.pubDate != null) {
        oprot.writeFieldBegin(PUB_DATE_FIELD_DESC);
        oprot.writeString(struct.pubDate);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataSetTupleSchemeFactory implements SchemeFactory {
    public DataSetTupleScheme getScheme() {
      return new DataSetTupleScheme();
    }
  }

  private static class DataSetTupleScheme extends TupleScheme<DataSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataSet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.abstractSummary);
      oprot.writeString(struct.datasetUUID);
      oprot.writeString(struct.intellectualRights);
      oprot.writeString(struct.language);
      oprot.writeString(struct.organizationName);
      oprot.writeString(struct.pubDate);
      oprot.writeString(struct.title);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataSet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.abstractSummary = iprot.readString();
      struct.setAbstractSummaryIsSet(true);
      struct.datasetUUID = iprot.readString();
      struct.setDatasetUUIDIsSet(true);
      struct.intellectualRights = iprot.readString();
      struct.setIntellectualRightsIsSet(true);
      struct.language = iprot.readString();
      struct.setLanguageIsSet(true);
      struct.organizationName = iprot.readString();
      struct.setOrganizationNameIsSet(true);
      struct.pubDate = iprot.readString();
      struct.setPubDateIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
    }
  }

}

