/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DatasetPropertyValue extends org.apache.thrift.TUnion<DatasetPropertyValue, DatasetPropertyValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DatasetPropertyValue");
  private static final org.apache.thrift.protocol.TField ABSTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSummary", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATASET_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetUUID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INTELLECTUAL_RIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("intellectualRights", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PUB_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pubDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ABSTRACT_SUMMARY((short)1, "abstractSummary"),
    DATASET_UUID((short)2, "datasetUUID"),
    INTELLECTUAL_RIGHTS((short)3, "intellectualRights"),
    LANGUAGE((short)4, "language"),
    ORGANIZATION_NAME((short)5, "organizationName"),
    PUB_DATE((short)6, "pubDate"),
    TITLE((short)7, "title");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ABSTRACT_SUMMARY
          return ABSTRACT_SUMMARY;
        case 2: // DATASET_UUID
          return DATASET_UUID;
        case 3: // INTELLECTUAL_RIGHTS
          return INTELLECTUAL_RIGHTS;
        case 4: // LANGUAGE
          return LANGUAGE;
        case 5: // ORGANIZATION_NAME
          return ORGANIZATION_NAME;
        case 6: // PUB_DATE
          return PUB_DATE;
        case 7: // TITLE
          return TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ABSTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("abstractSummary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATASET_UUID, new org.apache.thrift.meta_data.FieldMetaData("datasetUUID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTELLECTUAL_RIGHTS, new org.apache.thrift.meta_data.FieldMetaData("intellectualRights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("organizationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUB_DATE, new org.apache.thrift.meta_data.FieldMetaData("pubDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DatasetPropertyValue.class, metaDataMap);
  }

  public DatasetPropertyValue() {
    super();
  }

  public DatasetPropertyValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public DatasetPropertyValue(DatasetPropertyValue other) {
    super(other);
  }
  public DatasetPropertyValue deepCopy() {
    return new DatasetPropertyValue(this);
  }

  public static DatasetPropertyValue abstractSummary(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setAbstractSummary(value);
    return x;
  }

  public static DatasetPropertyValue datasetUUID(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setDatasetUUID(value);
    return x;
  }

  public static DatasetPropertyValue intellectualRights(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setIntellectualRights(value);
    return x;
  }

  public static DatasetPropertyValue language(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setLanguage(value);
    return x;
  }

  public static DatasetPropertyValue organizationName(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setOrganizationName(value);
    return x;
  }

  public static DatasetPropertyValue pubDate(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setPubDate(value);
    return x;
  }

  public static DatasetPropertyValue title(String value) {
    DatasetPropertyValue x = new DatasetPropertyValue();
    x.setTitle(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case ABSTRACT_SUMMARY:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'abstractSummary', but got " + value.getClass().getSimpleName());
      case DATASET_UUID:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'datasetUUID', but got " + value.getClass().getSimpleName());
      case INTELLECTUAL_RIGHTS:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'intellectualRights', but got " + value.getClass().getSimpleName());
      case LANGUAGE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'language', but got " + value.getClass().getSimpleName());
      case ORGANIZATION_NAME:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'organizationName', but got " + value.getClass().getSimpleName());
      case PUB_DATE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'pubDate', but got " + value.getClass().getSimpleName());
      case TITLE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'title', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case ABSTRACT_SUMMARY:
          if (field.type == ABSTRACT_SUMMARY_FIELD_DESC.type) {
            String abstractSummary;
            abstractSummary = iprot.readString();
            return abstractSummary;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DATASET_UUID:
          if (field.type == DATASET_UUID_FIELD_DESC.type) {
            String datasetUUID;
            datasetUUID = iprot.readString();
            return datasetUUID;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INTELLECTUAL_RIGHTS:
          if (field.type == INTELLECTUAL_RIGHTS_FIELD_DESC.type) {
            String intellectualRights;
            intellectualRights = iprot.readString();
            return intellectualRights;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LANGUAGE:
          if (field.type == LANGUAGE_FIELD_DESC.type) {
            String language;
            language = iprot.readString();
            return language;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ORGANIZATION_NAME:
          if (field.type == ORGANIZATION_NAME_FIELD_DESC.type) {
            String organizationName;
            organizationName = iprot.readString();
            return organizationName;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PUB_DATE:
          if (field.type == PUB_DATE_FIELD_DESC.type) {
            String pubDate;
            pubDate = iprot.readString();
            return pubDate;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TITLE:
          if (field.type == TITLE_FIELD_DESC.type) {
            String title;
            title = iprot.readString();
            return title;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ABSTRACT_SUMMARY:
        String abstractSummary = (String)value_;
        oprot.writeString(abstractSummary);
        return;
      case DATASET_UUID:
        String datasetUUID = (String)value_;
        oprot.writeString(datasetUUID);
        return;
      case INTELLECTUAL_RIGHTS:
        String intellectualRights = (String)value_;
        oprot.writeString(intellectualRights);
        return;
      case LANGUAGE:
        String language = (String)value_;
        oprot.writeString(language);
        return;
      case ORGANIZATION_NAME:
        String organizationName = (String)value_;
        oprot.writeString(organizationName);
        return;
      case PUB_DATE:
        String pubDate = (String)value_;
        oprot.writeString(pubDate);
        return;
      case TITLE:
        String title = (String)value_;
        oprot.writeString(title);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case ABSTRACT_SUMMARY:
          String abstractSummary;
          abstractSummary = iprot.readString();
          return abstractSummary;
        case DATASET_UUID:
          String datasetUUID;
          datasetUUID = iprot.readString();
          return datasetUUID;
        case INTELLECTUAL_RIGHTS:
          String intellectualRights;
          intellectualRights = iprot.readString();
          return intellectualRights;
        case LANGUAGE:
          String language;
          language = iprot.readString();
          return language;
        case ORGANIZATION_NAME:
          String organizationName;
          organizationName = iprot.readString();
          return organizationName;
        case PUB_DATE:
          String pubDate;
          pubDate = iprot.readString();
          return pubDate;
        case TITLE:
          String title;
          title = iprot.readString();
          return title;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ABSTRACT_SUMMARY:
        String abstractSummary = (String)value_;
        oprot.writeString(abstractSummary);
        return;
      case DATASET_UUID:
        String datasetUUID = (String)value_;
        oprot.writeString(datasetUUID);
        return;
      case INTELLECTUAL_RIGHTS:
        String intellectualRights = (String)value_;
        oprot.writeString(intellectualRights);
        return;
      case LANGUAGE:
        String language = (String)value_;
        oprot.writeString(language);
        return;
      case ORGANIZATION_NAME:
        String organizationName = (String)value_;
        oprot.writeString(organizationName);
        return;
      case PUB_DATE:
        String pubDate = (String)value_;
        oprot.writeString(pubDate);
        return;
      case TITLE:
        String title = (String)value_;
        oprot.writeString(title);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case ABSTRACT_SUMMARY:
        return ABSTRACT_SUMMARY_FIELD_DESC;
      case DATASET_UUID:
        return DATASET_UUID_FIELD_DESC;
      case INTELLECTUAL_RIGHTS:
        return INTELLECTUAL_RIGHTS_FIELD_DESC;
      case LANGUAGE:
        return LANGUAGE_FIELD_DESC;
      case ORGANIZATION_NAME:
        return ORGANIZATION_NAME_FIELD_DESC;
      case PUB_DATE:
        return PUB_DATE_FIELD_DESC;
      case TITLE:
        return TITLE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public String getAbstractSummary() {
    if (getSetField() == _Fields.ABSTRACT_SUMMARY) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'abstractSummary' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAbstractSummary(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ABSTRACT_SUMMARY;
    value_ = value;
  }

  public String getDatasetUUID() {
    if (getSetField() == _Fields.DATASET_UUID) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'datasetUUID' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDatasetUUID(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DATASET_UUID;
    value_ = value;
  }

  public String getIntellectualRights() {
    if (getSetField() == _Fields.INTELLECTUAL_RIGHTS) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'intellectualRights' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIntellectualRights(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.INTELLECTUAL_RIGHTS;
    value_ = value;
  }

  public String getLanguage() {
    if (getSetField() == _Fields.LANGUAGE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'language' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLanguage(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LANGUAGE;
    value_ = value;
  }

  public String getOrganizationName() {
    if (getSetField() == _Fields.ORGANIZATION_NAME) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'organizationName' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOrganizationName(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ORGANIZATION_NAME;
    value_ = value;
  }

  public String getPubDate() {
    if (getSetField() == _Fields.PUB_DATE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'pubDate' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPubDate(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PUB_DATE;
    value_ = value;
  }

  public String getTitle() {
    if (getSetField() == _Fields.TITLE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'title' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTitle(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TITLE;
    value_ = value;
  }

  public boolean isSetAbstractSummary() {
    return setField_ == _Fields.ABSTRACT_SUMMARY;
  }


  public boolean isSetDatasetUUID() {
    return setField_ == _Fields.DATASET_UUID;
  }


  public boolean isSetIntellectualRights() {
    return setField_ == _Fields.INTELLECTUAL_RIGHTS;
  }


  public boolean isSetLanguage() {
    return setField_ == _Fields.LANGUAGE;
  }


  public boolean isSetOrganizationName() {
    return setField_ == _Fields.ORGANIZATION_NAME;
  }


  public boolean isSetPubDate() {
    return setField_ == _Fields.PUB_DATE;
  }


  public boolean isSetTitle() {
    return setField_ == _Fields.TITLE;
  }


  public boolean equals(Object other) {
    if (other instanceof DatasetPropertyValue) {
      return equals((DatasetPropertyValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(DatasetPropertyValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DatasetPropertyValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
