/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gulo.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The OrganizationPropertyValue is the polymorphic representation of
 * Organization property values.
 */
public class OrganizationPropertyValue extends org.apache.thrift.TUnion<OrganizationPropertyValue, OrganizationPropertyValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrganizationPropertyValue");
  private static final org.apache.thrift.protocol.TField PRIMARY_CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryContact", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRIMARY_CONTACT((short)1, "primaryContact"),
    URL((short)2, "url"),
    NODE((short)3, "node"),
    LANGUAGE((short)4, "language"),
    DESCRIPTION((short)5, "description");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRIMARY_CONTACT
          return PRIMARY_CONTACT;
        case 2: // URL
          return URL;
        case 3: // NODE
          return NODE;
        case 4: // LANGUAGE
          return LANGUAGE;
        case 5: // DESCRIPTION
          return DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRIMARY_CONTACT, new org.apache.thrift.meta_data.FieldMetaData("primaryContact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrganizationPropertyValue.class, metaDataMap);
  }

  public OrganizationPropertyValue() {
    super();
  }

  public OrganizationPropertyValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public OrganizationPropertyValue(OrganizationPropertyValue other) {
    super(other);
  }
  public OrganizationPropertyValue deepCopy() {
    return new OrganizationPropertyValue(this);
  }

  public static OrganizationPropertyValue primaryContact(String value) {
    OrganizationPropertyValue x = new OrganizationPropertyValue();
    x.setPrimaryContact(value);
    return x;
  }

  public static OrganizationPropertyValue url(String value) {
    OrganizationPropertyValue x = new OrganizationPropertyValue();
    x.setUrl(value);
    return x;
  }

  public static OrganizationPropertyValue node(String value) {
    OrganizationPropertyValue x = new OrganizationPropertyValue();
    x.setNode(value);
    return x;
  }

  public static OrganizationPropertyValue language(String value) {
    OrganizationPropertyValue x = new OrganizationPropertyValue();
    x.setLanguage(value);
    return x;
  }

  public static OrganizationPropertyValue description(String value) {
    OrganizationPropertyValue x = new OrganizationPropertyValue();
    x.setDescription(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case PRIMARY_CONTACT:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'primaryContact', but got " + value.getClass().getSimpleName());
      case URL:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'url', but got " + value.getClass().getSimpleName());
      case NODE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'node', but got " + value.getClass().getSimpleName());
      case LANGUAGE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'language', but got " + value.getClass().getSimpleName());
      case DESCRIPTION:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'description', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case PRIMARY_CONTACT:
          if (field.type == PRIMARY_CONTACT_FIELD_DESC.type) {
            String primaryContact;
            primaryContact = iprot.readString();
            return primaryContact;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case URL:
          if (field.type == URL_FIELD_DESC.type) {
            String url;
            url = iprot.readString();
            return url;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NODE:
          if (field.type == NODE_FIELD_DESC.type) {
            String node;
            node = iprot.readString();
            return node;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LANGUAGE:
          if (field.type == LANGUAGE_FIELD_DESC.type) {
            String language;
            language = iprot.readString();
            return language;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DESCRIPTION:
          if (field.type == DESCRIPTION_FIELD_DESC.type) {
            String description;
            description = iprot.readString();
            return description;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PRIMARY_CONTACT:
        String primaryContact = (String)value_;
        oprot.writeString(primaryContact);
        return;
      case URL:
        String url = (String)value_;
        oprot.writeString(url);
        return;
      case NODE:
        String node = (String)value_;
        oprot.writeString(node);
        return;
      case LANGUAGE:
        String language = (String)value_;
        oprot.writeString(language);
        return;
      case DESCRIPTION:
        String description = (String)value_;
        oprot.writeString(description);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case PRIMARY_CONTACT:
          String primaryContact;
          primaryContact = iprot.readString();
          return primaryContact;
        case URL:
          String url;
          url = iprot.readString();
          return url;
        case NODE:
          String node;
          node = iprot.readString();
          return node;
        case LANGUAGE:
          String language;
          language = iprot.readString();
          return language;
        case DESCRIPTION:
          String description;
          description = iprot.readString();
          return description;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PRIMARY_CONTACT:
        String primaryContact = (String)value_;
        oprot.writeString(primaryContact);
        return;
      case URL:
        String url = (String)value_;
        oprot.writeString(url);
        return;
      case NODE:
        String node = (String)value_;
        oprot.writeString(node);
        return;
      case LANGUAGE:
        String language = (String)value_;
        oprot.writeString(language);
        return;
      case DESCRIPTION:
        String description = (String)value_;
        oprot.writeString(description);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case PRIMARY_CONTACT:
        return PRIMARY_CONTACT_FIELD_DESC;
      case URL:
        return URL_FIELD_DESC;
      case NODE:
        return NODE_FIELD_DESC;
      case LANGUAGE:
        return LANGUAGE_FIELD_DESC;
      case DESCRIPTION:
        return DESCRIPTION_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public String getPrimaryContact() {
    if (getSetField() == _Fields.PRIMARY_CONTACT) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'primaryContact' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPrimaryContact(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PRIMARY_CONTACT;
    value_ = value;
  }

  public String getUrl() {
    if (getSetField() == _Fields.URL) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'url' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUrl(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.URL;
    value_ = value;
  }

  public String getNode() {
    if (getSetField() == _Fields.NODE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'node' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNode(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.NODE;
    value_ = value;
  }

  public String getLanguage() {
    if (getSetField() == _Fields.LANGUAGE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'language' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLanguage(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LANGUAGE;
    value_ = value;
  }

  public String getDescription() {
    if (getSetField() == _Fields.DESCRIPTION) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'description' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDescription(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DESCRIPTION;
    value_ = value;
  }

  public boolean isSetPrimaryContact() {
    return setField_ == _Fields.PRIMARY_CONTACT;
  }


  public boolean isSetUrl() {
    return setField_ == _Fields.URL;
  }


  public boolean isSetNode() {
    return setField_ == _Fields.NODE;
  }


  public boolean isSetLanguage() {
    return setField_ == _Fields.LANGUAGE;
  }


  public boolean isSetDescription() {
    return setField_ == _Fields.DESCRIPTION;
  }


  public boolean equals(Object other) {
    if (other instanceof OrganizationPropertyValue) {
      return equals((OrganizationPropertyValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(OrganizationPropertyValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(OrganizationPropertyValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
